# -*- coding: utf-8 -*-
"""project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OzWr8TES34BR9Z24nesgg9sIMs1kA_lI
"""

import pandas as pd
data=pd.read_csv('/content/tips.csv')
print(data)

import matplotlib.pyplot as plt
import pandas as pd
data=pd.read_csv('/content/tips.csv')
plt.hist(data['day'],color='blue',alpha=0.7)
plt.xlabel('day')
plt.ylabel('Frequency')
plt.title('histplot')
plt.show()

plt.hist(data['day'],bins=10)
plt.hist(data['sex'],bins=10)
plt.show()

plt.scatter(x='day',y='tip',data=data)

plt.xlabel('day')
plt.ylabel('tip')
plt.show()

import matplotlib.pyplot as plt
plt.boxplot(data['tip'])
plt.show()

import matplotlib.pyplot as plt
x=data['tip']
y=data['day']
plt.bar(x,y,width=5)
plt.show()

import pandas as pd
from scipy import stats
import matplotlib.pyplot as plt
import numpy as np
data = pd.read_csv('/content/Auto.csv')
print(data)

mean=data['cylinders'].mean()
median=data['displacement'].median()
mode=stats.mode(data['mpg'])
print(" weight ")
print('mean:',mean)
print('median:',median)
print('mode:',mode)

data_range = np.ptp(data['mpg'])
variance = np.var(data['mpg'])
std_deviation = np.std(data['mpg'])
iqr=np.percentile(data['mpg'],75)-np.percentile(data['mpg'],25)
print(" dispersion")
print("data_range:",data_range)
print("variance:",variance)
print("std_deviation:",std_deviation)
print("iqr",iqr)

import seaborn as sns
plt.figure(figsize=(12,6))
plt.subplot(131)
sns.histplot(data['mpg'], kde=True)
plt.title("Histogram of hp")
plt.subplot(132)
sns.boxplot(x='cylinders', data=data)
plt.title("Box Plot of hp")
plt.show()

import numpy as np
import pandas as pd
data=pd.read_csv('/content/BostonHousing (2).csv')
data.head()

from scipy import stats
import pandas as pd
df=pd.read_csv('/content/BostonHousing (2).csv')
df.describe()
zscore=stats.zscore(df['age'])
threshold=2
outlier=abs(zscore)>threshold
print(outlier)

import matplotlib.pyplot as plt
import pandas as pd
data={
    'age':[10,20,30,40,50,60,70,80,90,100],
}
data=pd.DataFrame(data)
z_score=(data['age']-data['age'].mean())/data['age'].std()
threshold=3
outlier=data[(z_score>threshold)|(z_score<-threshold)]
plt.figure(figsize=(10,6))
plt.plot(data.index,data['age'],'bo',label='data points')
plt.plot(outlier.index,outlier['age'],'ro',label='outliers')
plt.xlabel("index")
plt.ylabel("age")
plt.legend()
plt.show()

import pandas as pd
data=pd.read_csv('/content/BostonHousing (2).csv')
import matplotlib.pyplot as plt
plt.scatter(data['indus'],data['age'])
plt.xlabel('indus')
plt.ylabel('age')
plt.show()

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split

iris=load_iris()
x,y=iris.data,iris.target

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.5,random_state=42)

print("X train data :",x_train)
print("X test data :",x_test)
print("y train data :",y_train)
print("y test data :",y_test)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df=pd.read_csv('/content/iris.csv')

summary=df.describe()
sample_data=df.head()
missing_values=df.isnull().sum()

print("\nsummary of the dataset:",summary)
print("\nsample data of the dataset:",sample_data)
print("\nchecking missing values in dataset:",missing_values)

sns.histplot(df['sepal.length'],bins=10)
plt.title('Histplot of sepal.length column')
plt.show()

sns.countplot(df['sepal.width'])
plt.title('count plot of sepal.width column')
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
df=pd.read_csv('/content/iris.csv')
missing=df.dropna()
print("Removed the missing values:",missing)
correlation=df.drop(columns=['variety']).corr()
print("checking the correlation of dataset:",correlation)
sns.heatmap(df.drop(columns=['variety']).corr())
plt.title('Heatmap of correlation of dataset')
plt.show()
x=df.drop(columns=['sepal.width'])
print("Removed the sepal.width column:",x)

from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
import pandas as pd

breast=load_breast_cancer ()
x,y=breast.data,breast.target

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=50)

clf=DecisionTreeClassifier()
clf=clf.fit(x_train,y_train)

xtrain=clf.predict(x_train)
xtest=clf.predict(x_test)

print("Accuracy of the Traindata:",accuracy_score(y_train,xtrain))
print("Accuracy of the Test data :",accuracy_score(y_test,xtest))